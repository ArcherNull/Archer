{"version":3,"file":"js/477.74dfff44.js","mappings":"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EAEA,kBACA,kCACA,kCACA,8BACA,4BACA,4BACA,EAEA,mBACA,yBACA,mCACA,mCACA,6BACA,6BACA,EAGA,sBACA,aACA,WACA,uBAEA,CAEA,EAGA,sBACA,sCACA,gBAEA,cACA,wBACA,eACA,uBACA,+BACA,oBACA,aACA,8BACA,8BACA,iCACA,0CACA,CACA,sCACA,EAEA,qBACA,kBAEA,wBACA,uCACA,uCAEA,EAGA,mBACA,kBACA,mBACA,EAGA,sBACA,oBACA,uBACA,oBACA,iBACA,wBACA,uBACA,wBAEA,EAEA,6CACA,mBACA,6BACA,uBACA,gCACA,iCACA,iCACA,qBACA,yBACA,gDACA,qBACA,QAEA,qBACA,sBACA,yCACA,2BACA,qBACA,EAEA,gDACA,oBACA,uCACA,uCACA,+CACA,QAEA,iDACA,oBACA,wCACA,wCACA,gDACA,QAEA,8BACA,aAEA,sBACA,qBACA,oBACA,kBACA,aACA,qBAEA,sBAEA,wBAEA,EAEA,qBACA,iBACA,EAEA,qBACA,gBACA,mDAEA,GADA,oBACA,cACA,mCAGA,GAFA,yBACA,wBACA,iBACA,qBACA,6BACA,6BACA,mCACA,uBACA,iBACA,sDACA,IACA,CACA,wBACA,iCAIA,GAHA,6BACA,yBAEA,iBACA,qBACA,8BACA,8BACA,iBACA,sDACA,IACA,CACA,wBACA,MACA,qBACA,wBACA,sBAEA,EAGA,2BACA,wBAEA,GADA,yBACA,GACA,aACA,4BACA,oCACA,sCAGA,kBAEA,YACA,yCACA,qCACA,WACA,GACA,MACA,KACA,GAEA,ICtYinB,I,WCQ7mBG,GAAY,OACd,EACA,EACA,GACA,EACA,KACA,KACA,MAIF,EAAeA,EAAiB,Q,sBCqNhC,GACA,sBACA,YACA,aAEA,OAEA,SACA,aACA,YAEA,SACA,YACA,UACA,QACA,IAGA,OACA,OACA,gBAEA,eAEA,iBACA,kBACA,qBAGA,UACA,mBAGA,UAGA,OACA,eACA,sDAEA,eAEA,EACA,OACA,WACA,EACA,kBAEA,qBACA,2CACA,oBACA,YACA,QACA,WACA,YAEA,cACA,cAEA,aACA,QACA,QACA,WACA,YAEA,gBAGA,eACA,wBAEA,GAEA,eACA,6DACA,EACA,SAEA,YACA,kBACA,mBACA,+BACA,eAEA,EAEA,eACA,mBACA,mDAEA,GADA,oBACA,aACA,0BACA,uBACA,sBACA,gBACA,YACA,uBAEA,kBACA,wBACA,CACA,UACA,cAGA,0BACA,uBACA,sBACA,YACA,kBAEA,kBACA,CACA,EAEA,oBACA,SACA,MAEA,2BACA,mBACA,cACA,0BACA,eACA,aACA,sBACA,IAEA,mCACA,EAGA,WACA,2BACA,qBACA,qBACA,iBACA,iBACA,+CAEA,gCACA,YACA,YAEA,qBACA,0BACA,YACA,4BACA,gBACA,YACA,YACA,WACA,kBACA,gBACA,cAGA,qBACA,SACA,8BACA,8CACA,6BACA,aACA,CACA,aACA,MAIA,CAEA,2CACA,+BACA,YACA,QACA,MACA,OAEA,gBACA,iBAEA,aACA,OACA,QACA,MACA,OAEA,kBAEA,GACA,GACA,GAEA,EAGA,eACA,+BACA,EAGA,gBACA,oBACA,qBACA,6BAEA,EAGA,gDACA,kBACA,8DACA,GAEA,mCAEA,WACA,KACA,eACA,0BACA,gBACA,UACA,eACA,UACA,IAGA,mBACA,iBACA,6BACA,IACA,QAEA,iBACA,oBACA,0BACA,WAEA,EAGA,sBACA,sBACA,gEACA,SACA,YAEA,GACA,+BACA,YACA,QACA,MACA,OAEA,cACA,SAEA,aACA,QACA,QACA,MACA,OAEA,UAGA,WACA,4CACA,yBACA,uBAGA,oCAGA,8BACA,aACA,oCACA,qCAEA,sBACA,sBACA,gCACA,uBAEA,4CACA,CACA,EAGA,eACA,cACA,kCACA,OACA,kBACA,SACA,0CACA,GAGA,gCACA,yCACA,mBAIA,aACA,iBACA,sBAEA,mBAEA,IAEA,EAGA,YACA,uBACA,EAGA,eACA,uBACA,WACA,UACA,cACA,kCACA,oBACA,uBAEA,sCACA,IAEA,cACA,wBAEA,EAGA,gBACA,uBACA,WACA,UACA,cACA,kCACA,oBACA,uBAEA,sCACA,IAEA,cACA,wBAEA,IC3kByqB,ICQrqB,GAAY,OACd,EACAhF,EACAuD,GACA,EACA,KACA,WACA,MAIF,EAAe,EAAiB,O","sources":["webpack://AG/./src/views/pages/map/baidu-map/electronic-fence/components/AddFenceDialog/index.vue?c657","webpack://AG/./src/components/BLMap/BMapFence.vue?f141","webpack://AG/./src/utils/math.js","webpack://AG/src/components/BLMap/BMapFence.vue","webpack://AG/./src/components/BLMap/BMapFence.vue?9003","webpack://AG/./src/components/BLMap/BMapFence.vue","webpack://AG/src/views/pages/map/baidu-map/electronic-fence/components/AddFenceDialog/index.vue","webpack://AG/./src/views/pages/map/baidu-map/electronic-fence/components/AddFenceDialog/index.vue?776d","webpack://AG/./src/views/pages/map/baidu-map/electronic-fence/components/AddFenceDialog/index.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('BLModal',{attrs:{\"title\":((_vm.editId ? '编辑' : '新增') + \"电子围栏\"),\"dialogStyle\":{\n    top: '50px',\n    paddingBottom: '0px',\n  },\"bodyStyle\":{\n    padding: '10px 16px',\n    maxHeight: 'calc(100vh - 180px)',\n    overflowY: 'scroll',\n  },\"visible\":_vm.visible},on:{\"cancel\":_vm.handleCancel}},[_c('div',{staticClass:\"AddFenceDialog-content\"},[_c('BMapFence',{ref:\"BMapFenceRef\",on:{\"postMessage\":_vm.postMessage}}),(_vm.addFenceType)?_c('a-card',{staticClass:\"AddFenceDialog-content-form\",attrs:{\"bodyStyle\":{ padding: '6px 16px' }}},[_c('h3',[_vm._v(\"新增围栏：\"+_vm._s(_vm.addFenceType === \"circle\" ? \"圆\" : \"多边形\"))]),_c('a-form',{attrs:{\"form\":_vm.form,\"name\":\"AddFenceForm\",\"layout\":\"vertical\"}},[_c('a-form-item',{attrs:{\"label\":\"围栏名称\"}},[_c('a-input',{directives:[{name:\"decorator\",rawName:\"v-decorator.trim\",value:([\n              'name',\n              {\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入围栏名称',\n                  } ],\n              } ]),expression:\"[\\n              'name',\\n              {\\n                rules: [\\n                  {\\n                    required: true,\\n                    message: '请输入围栏名称',\\n                  },\\n                ],\\n              },\\n            ]\",modifiers:{\"trim\":true}}],attrs:{\"placeholder\":\"请输入围栏名称\"}})],1),_c('a-form-item',{attrs:{\"label\":\"类别\"}},[_c('a-select',{directives:[{name:\"decorator\",rawName:\"v-decorator.trim\",value:([\n              'category',\n              {\n                rules: [\n                  {\n                    required: true,\n                    message: '请选择类别!',\n                  } ],\n              } ]),expression:\"[\\n              'category',\\n              {\\n                rules: [\\n                  {\\n                    required: true,\\n                    message: '请选择类别!',\\n                  },\\n                ],\\n              },\\n            ]\",modifiers:{\"trim\":true}}],attrs:{\"placeholder\":\"请选择类别\",\"allowClear\":\"\"}},_vm._l((_vm.dicItems.fence_category),function(item,index){return _c('a-select-option',{key:index,attrs:{\"value\":item.dicValue}},[_vm._v(\" \"+_vm._s(item.dicLabel)+\" \")])}),1)],1),(_vm.addFenceType === 'circle')?_c('a-form-item',{attrs:{\"label\":\"半径\"}},[_c('div',{staticClass:\"flex-censta\"},[_c('a-input-number',{directives:[{name:\"decorator\",rawName:\"v-decorator.trim\",value:([\n                'radius',\n                {\n                  rules: [\n                    {\n                      required: true,\n                      message: '请输入半径',\n                    } ],\n                } ]),expression:\"[\\n                'radius',\\n                {\\n                  rules: [\\n                    {\\n                      required: true,\\n                      message: '请输入半径',\\n                    },\\n                  ],\\n                },\\n              ]\",modifiers:{\"trim\":true}}],staticStyle:{\"width\":\"calc(100% - 30px)\"},attrs:{\"min\":0,\"placeholder\":\"请输入\"},on:{\"change\":_vm.radiusChange}}),_c('div',{staticStyle:{\"margin-left\":\"6px\",\"width\":\"30px\"}},[_vm._v(\"m\")])],1)]):_vm._e(),_c('a-form-item',{attrs:{\"label\":\"面积\"}},[_c('div',{staticClass:\"flex-censta\"},[_c('a-input-number',{directives:[{name:\"decorator\",rawName:\"v-decorator.trim\",value:([\n                'size',\n                {\n                  rules: [\n                    {\n                      required: false,\n                      message: '请输入面积',\n                    } ],\n                } ]),expression:\"[\\n                'size',\\n                {\\n                  rules: [\\n                    {\\n                      required: false,\\n                      message: '请输入面积',\\n                    },\\n                  ],\\n                },\\n              ]\",modifiers:{\"trim\":true}}],staticStyle:{\"width\":\"calc(100% - 30px)\"},attrs:{\"min\":0,\"placeholder\":\"请输入\",\"disabled\":\"\"}}),_c('div',{staticStyle:{\"margin-left\":\"6px\",\"width\":\"30px\"}},[_vm._v(\"km²\")])],1)]),_c('a-form-item',{attrs:{\"label\":\"经度\"}},[_c('a-input-number',{directives:[{name:\"decorator\",rawName:\"v-decorator.trim\",value:([\n              'longitude',\n              {\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入经度',\n                  } ],\n              } ]),expression:\"[\\n              'longitude',\\n              {\\n                rules: [\\n                  {\\n                    required: true,\\n                    message: '请输入经度',\\n                  },\\n                ],\\n              },\\n            ]\",modifiers:{\"trim\":true}}],staticStyle:{\"width\":\"100%\"},attrs:{\"min\":0,\"disabled\":\"\",\"placeholder\":\"请输入经度\"}})],1),_c('a-form-item',{attrs:{\"label\":\"纬度\"}},[_c('a-input-number',{directives:[{name:\"decorator\",rawName:\"v-decorator.trim\",value:([\n              'latitude',\n              {\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入纬度',\n                  } ],\n              } ]),expression:\"[\\n              'latitude',\\n              {\\n                rules: [\\n                  {\\n                    required: true,\\n                    message: '请输入纬度',\\n                  },\\n                ],\\n              },\\n            ]\",modifiers:{\"trim\":true}}],staticStyle:{\"width\":\"100%\"},attrs:{\"min\":0,\"disabled\":\"\",\"placeholder\":\"请输入纬度\"}})],1),_c('a-form-item',{attrs:{\"label\":\"详细地址\"}},[_c('a-auto-complete',{directives:[{name:\"decorator\",rawName:\"v-decorator.trim\",value:([\n              'address',\n              {\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入详细地址',\n                  } ],\n              } ]),expression:\"[\\n              'address',\\n              {\\n                rules: [\\n                  {\\n                    required: true,\\n                    message: '请输入详细地址',\\n                  },\\n                ],\\n              },\\n            ]\",modifiers:{\"trim\":true}}],attrs:{\"data-source\":_vm.addressList,\"placeholder\":\"请输入详细地址\"},on:{\"change\":_vm.changeAddress,\"select\":_vm.selectAddress}},[_c('template',{slot:\"dataSource\"},_vm._l((_vm.addressList),function(addressItem){return _c('a-select-option',{key:addressItem.addressStr},[_vm._v(_vm._s(addressItem.addressStr))])}),1)],2)],1),_c('a-form-item',{attrs:{\"label\":\"备注\"}},[_c('a-textarea',{directives:[{name:\"decorator\",rawName:\"v-decorator.trim\",value:([\n              'remark',\n              {\n                rules: [\n                  {\n                    required: false,\n                    message: '请输入备注',\n                  } ],\n              } ]),expression:\"[\\n              'remark',\\n              {\\n                rules: [\\n                  {\\n                    required: false,\\n                    message: '请输入备注',\\n                  },\\n                ],\\n              },\\n            ]\",modifiers:{\"trim\":true}}],attrs:{\"placeholder\":\"请输入备注\",\"allowClear\":\"\",\"maxLength\":200,\"auto-size\":{ minRows: 3, maxRows: 5 }}})],1),_c('a-form-item',[_c('div',{staticClass:\"flex-cenend formBtn\"},[_c('BLButton',{on:{\"click\":function($event){return _vm.resetForm()}}},[_vm._v(\"重置\")]),_c('BLButton',{attrs:{\"type\":\"primary\",\"loading\":_vm.submitLoading},on:{\"click\":function($event){return _vm.handleSubmit()}}},[_vm._v(\"保存\")])],1)])],1)],1):_vm._e()],1),_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('BLButton',{on:{\"click\":_vm.handleCancel}},[_vm._v(\"取消\")])],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"BMapFence\"},[_c('baidu-map',{staticStyle:{\"height\":\"700px\",\"width\":\"100%\"},attrs:{\"center\":_vm.center,\"zoom\":_vm.zoom,\"scroll-wheel-zoom\":true},on:{\"ready\":_vm.bMapReady,\"click\":_vm.clickBMap,\"moveend\":_vm.syncCenterAndZoom,\"zoomend\":_vm.syncCenterAndZoom}},[_c('bm-scale',{attrs:{\"anchor\":\"BMAP_ANCHOR_TOP_RIGHT\"}}),_c('bm-navigation',{attrs:{\"anchor\":\"BMAP_ANCHOR_BOTTOM_LEFT\"}}),_c('bm-city-list',{attrs:{\"anchor\":\"BMAP_ANCHOR_TOP_RIGHT\"}}),_c('bm-boundary',{attrs:{\"name\":\"北京市海淀区\",\"strokeWeight\":2,\"strokeColor\":\"blue\"}}),_c('bm-control',{staticClass:\"bmControl\",attrs:{\"anchor\":\"BMAP_ANCHOR_TOP_LEFT\"}},[_c('a-radio-group',{staticClass:\"control\",attrs:{\"value\":_vm.addFenceType,\"button-style\":\"solid\"},on:{\"change\":_vm.addFenceTypeChange}},[_c('a-radio-button',{attrs:{\"value\":\"circle\"}},[_vm._v(\"圆\")]),_c('a-radio-button',{attrs:{\"value\":\"polygon\"}},[_vm._v(\"多边形\")])],1)],1),(_vm.showCircleCenterMarker)?_c('bm-marker',{attrs:{\"position\":_vm.circlePath.center,\"dragging\":true},on:{\"dragend\":_vm.dragMarkerCircleEnd}},[(_vm.circlePath.label)?_c('bm-label',{attrs:{\"content\":_vm.circlePath.label,\"labelStyle\":{ color: 'red', fontSize: '16px' },\"offset\":{ width: -45, height: -30 }}}):_vm._e()],1):_vm._e(),(_vm.showPolygonCenterMarker)?_c('bm-marker',{attrs:{\"position\":_vm.polygonPath.center,\"dragging\":true},on:{\"dragend\":_vm.dragMarkerPolygonEnd}},[(_vm.polygonPath.label)?_c('bm-label',{attrs:{\"content\":_vm.polygonPath.label,\"labelStyle\":{ color: 'red', fontSize: '16px' },\"offset\":{ width: -45, height: -30 }}}):_vm._e()],1):_vm._e(),(_vm.showCircle)?_c('bm-circle',{attrs:{\"center\":_vm.circlePath.center,\"radius\":_vm.circlePath.radius,\"stroke-color\":\"blue\",\"stroke-opacity\":0.5,\"stroke-weight\":2,\"editing\":true},on:{\"lineupdate\":_vm.updateCirclePath}}):_vm._e(),(_vm.showPolygon)?_c('bm-polygon',{attrs:{\"path\":_vm.polygonPath.path,\"stroke-color\":\"blue\",\"stroke-opacity\":0.5,\"stroke-weight\":2,\"editing\":true},on:{\"lineupdate\":_vm.updatePolygonPath}}):_vm._e()],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/*\r\n * @Author: junsong Chen 779217162@qq.com\r\n * @Date: 2024-02-22 14:58:29\r\n * @LastEditTime: 2024-02-22 14:58:56\r\n * @Description:\r\n */\r\n/**\r\n * @description: 转换为数字\r\n * @param {unknown} str\r\n * @return {*}\r\n */\r\nexport function convertNumber(str) {\r\n  const val = Number(str)\r\n  return isNaN(val) ? 0 : val\r\n}\r\n\r\n/**\r\n * @description: 转换为正整数字\r\n * @param {unknown} str\r\n * @return {*}\r\n */\r\nexport function convertPositiveInteger(str) {\r\n  const val = convertNumber(str)\r\n  return val >= 0 ? val : 1\r\n}\r\n\r\n/**\r\n * @description: 对对应精度的数字四舍五入\r\n * @param {*} num 数字\r\n * @param {*} accuracy 小数点精度\r\n * @param {*} type 取舍方式 'ceil' | 'floor' | 'round'\r\n * @return {number}\r\n */\r\nexport function NumberRoundUp(num, accuracy, type = 'round') {\r\n  const numVal = convertNumber(num)\r\n  if (numVal) {\r\n    const accuracyVal = Math.pow(10, convertNumber(accuracy) || 3)\r\n    const newVal = numVal * accuracyVal\r\n\r\n    // 如果精度是3，则下方是对第四位小数进行操作的\r\n    if (type === 'ceil') {\r\n      return Math.ceil(newVal) / accuracyVal\r\n    } else if (type === 'floor') {\r\n      return Math.floor(newVal) / accuracyVal\r\n    } else {\r\n      return Math.round(newVal) / accuracyVal\r\n    }\r\n  } else {\r\n    return 0\r\n  }\r\n}\r\n\r\n/**\r\n * @description: 将数字转换为百分比\r\n * @param {string | number} str 字符串\r\n * @param {number} accuracy 小数点精度\r\n * @return {string} 百分比字符串\r\n */\r\nexport function convertNumToPercentage(str, accuracy) {\r\n  if (str) {\r\n    if (/^(\\\\-|\\\\+)?\\d+(\\.\\d+)?$/.test(String(str))) {\r\n      const num = convertNumber(str)\r\n      return `${NumberRoundUp(num * 100).toFixed(accuracy || 2)}%`\r\n    } else {\r\n      return `0%`\r\n    }\r\n  } else {\r\n    return `0%`\r\n  }\r\n}\r\n\r\n/**\r\n * @description: 将百分比转换为数字\r\n * @param {string} str 百分比字符串\r\n * @return {number} 数字\r\n */\r\nexport function convertPercentageToNum(str) {\r\n  if (isPercentage(str)) {\r\n    const num = convertNumber(str.replace('%', ''))\r\n    return NumberRoundUp(num / 100)\r\n  } else {\r\n    return 0\r\n  }\r\n}\r\n\r\n/**\r\n * @description: 检测字符串是否是含%的百分比字符串\r\n * @param {string} str 百分比字符串\r\n * @return {boolean} 布尔值\r\n */\r\nexport function isPercentage(str) {\r\n  return /^(\\\\-|\\\\+)?\\d+((\\.\\d+)|\\d+)%$/.test(str)\r\n}\r\n","<template>\r\n  <div class=\"BMapFence\">\r\n    <baidu-map\r\n      style=\"height: 700px;width: 100%;\"\r\n      :center=\"center\"\r\n      :zoom=\"zoom\"\r\n      :scroll-wheel-zoom=\"true\"\r\n      @ready=\"bMapReady\"\r\n      @click=\"clickBMap\"\r\n      @moveend=\"syncCenterAndZoom\"\r\n      @zoomend=\"syncCenterAndZoom\"\r\n    >\r\n      <!-- 比例尺 -->\r\n      <bm-scale anchor=\"BMAP_ANCHOR_TOP_RIGHT\"></bm-scale>\r\n      <!-- 缩放 -->\r\n      <bm-navigation anchor=\"BMAP_ANCHOR_BOTTOM_LEFT\"></bm-navigation>\r\n      <!-- 城市选择控件 -->\r\n      <bm-city-list anchor=\"BMAP_ANCHOR_TOP_RIGHT\"></bm-city-list>\r\n      <!-- 行政区域 -->\r\n      <bm-boundary name=\"北京市海淀区\" :strokeWeight=\"2\" strokeColor=\"blue\"></bm-boundary>\r\n      <!-- 搜索框 -->\r\n      <!-- <bm-control :offset=\"{ width: '10px', height: '10px' }\">\r\n        <bm-auto-complete v-model=\"keyword\" :sugStyle=\"{ zIndex: 1 }\" @searchcomplete=\"searchcompleteFun\">\r\n          <a-input-search placeholder=\"请输入地名关键字\" style=\"width: 200px\" />\r\n        </bm-auto-complete>\r\n      </bm-control> -->\r\n\r\n      <bm-control class=\"bmControl\" anchor=\"BMAP_ANCHOR_TOP_LEFT\">\r\n        <a-radio-group class=\"control\" :value=\"addFenceType\" button-style=\"solid\" @change=\"addFenceTypeChange\">\r\n          <a-radio-button value=\"circle\">圆</a-radio-button>\r\n          <a-radio-button value=\"polygon\">多边形</a-radio-button>\r\n        </a-radio-group>\r\n      </bm-control>\r\n\r\n      <!-- 圆形描点 -->\r\n      <bm-marker\r\n        :position=\"circlePath.center\"\r\n        v-if=\"showCircleCenterMarker\"\r\n        :dragging=\"true\"\r\n        @dragend=\"dragMarkerCircleEnd\"\r\n      >\r\n        <bm-label\r\n          v-if=\"circlePath.label\"\r\n          :content=\"circlePath.label\"\r\n          :labelStyle=\"{ color: 'red', fontSize: '16px' }\"\r\n          :offset=\"{ width: -45, height: -30 }\"\r\n        />\r\n      </bm-marker>\r\n\r\n      <!-- 多边形描点 -->\r\n      <bm-marker\r\n        :position=\"polygonPath.center\"\r\n        v-if=\"showPolygonCenterMarker\"\r\n        :dragging=\"true\"\r\n        @dragend=\"dragMarkerPolygonEnd\"\r\n      >\r\n        <bm-label\r\n          v-if=\"polygonPath.label\"\r\n          :content=\"polygonPath.label\"\r\n          :labelStyle=\"{ color: 'red', fontSize: '16px' }\"\r\n          :offset=\"{ width: -45, height: -30 }\"\r\n        />\r\n      </bm-marker>\r\n\r\n      <!-- 圆 -->\r\n      <bm-circle\r\n        v-if=\"showCircle\"\r\n        :center=\"circlePath.center\"\r\n        :radius=\"circlePath.radius\"\r\n        stroke-color=\"blue\"\r\n        :stroke-opacity=\"0.5\"\r\n        :stroke-weight=\"2\"\r\n        @lineupdate=\"updateCirclePath\"\r\n        :editing=\"true\"\r\n      ></bm-circle>\r\n\r\n      <!-- 多边形 -->\r\n      <bm-polygon\r\n        v-if=\"showPolygon\"\r\n        :path=\"polygonPath.path\"\r\n        stroke-color=\"blue\"\r\n        :stroke-opacity=\"0.5\"\r\n        :stroke-weight=\"2\"\r\n        :editing=\"true\"\r\n        @lineupdate=\"updatePolygonPath\"\r\n      />\r\n    </baidu-map>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { debounce } from 'lodash'\r\nimport { convertNumber } from '@/utils/math.js'\r\nexport default {\r\n  name: 'BMapFence',\r\n  data() {\r\n    return {\r\n      center: { lng: 114.162508, lat: 22.661813 },\r\n\r\n      zoom: 11,\r\n\r\n      // 圆形覆盖物\r\n      circlePath: {\r\n        center: {\r\n          lng: undefined,\r\n          lat: undefined\r\n        },\r\n        radius: undefined,\r\n        area: undefined,\r\n        label: undefined\r\n      },\r\n      // 添加电子围栏类型\r\n      addFenceType: '',\r\n      //   // 圆形中心点label\r\n      //   circleCenterLabel: '',\r\n      // 多边形形覆盖物\r\n      polygonPath: {\r\n        path: [],\r\n        center: {\r\n          lng: undefined,\r\n          lat: undefined\r\n        },\r\n        area: undefined,\r\n        label: undefined\r\n      },\r\n      // 当前中心点经纬度\r\n      currentCenter: { lng: 114.162508, lat: 22.661813 },\r\n      // 地图类\r\n      BMap: null,\r\n      // 地图实例\r\n      map: null,\r\n\r\n      // 关键词\r\n      keyword: '',\r\n      // 计算面积\r\n      calcAreaSize: 0\r\n    }\r\n  },\r\n  computed: {\r\n    showCircleCenterMarker() {\r\n      const { center } = this.circlePath\r\n      return this.addFenceType === 'circle' && center.lng && center.lat\r\n    },\r\n    showPolygonCenterMarker() {\r\n      const { center, path } = this.polygonPath\r\n      return this.showPolygon && center.lng && center.lat && path.length > 2\r\n    },\r\n    showCircle() {\r\n      const { radius } = this.circlePath\r\n      return this.showCircleCenterMarker && radius\r\n    },\r\n    showPolygon() {\r\n      return this.addFenceType === 'polygon' && this.polygonPath.path && this.polygonPath.path.length\r\n    }\r\n  },\r\n  methods: {\r\n    \r\n    /** 添加地图标注 */\r\n    bMapReady({ BMap, map }) {\r\n      this.BMap = BMap\r\n      this.map = map\r\n    },\r\n    // 点击BMap\r\n    clickBMap(e) {\r\n      console.log('点击BMap', e)\r\n      const { lat, lng } = e.point\r\n      if (this.addFenceType === 'circle') {\r\n        this.resetPolygonData()\r\n        if (!(this.circlePath.center.lng && this.circlePath.center.lat)) {\r\n          this.circlePath.center.lng = lng\r\n          this.circlePath.center.lat = lat\r\n          this.circlePath.radius = 5000\r\n          this.zoom = 15\r\n          this.center = { lng, lat }\r\n          const circleAreaSize = this.calcCircleAreaSize(5000)\r\n          console.log('circleAreaSize123123', circleAreaSize)\r\n          this.circlePath.area = circleAreaSize\r\n          this.getAddressInfoByLocation(e.point, 'circle')\r\n        }\r\n      } else if (this.addFenceType === 'polygon') {\r\n        this.resetCircleData()\r\n        this.polygonPath.path.push({\r\n          lng,\r\n          lat\r\n        })\r\n        if (this.polygonPath.path.length > 2) {\r\n          this.calcPolygonAreaSize()\r\n        }\r\n        this.postMessageFun()\r\n      }\r\n    },\r\n    // 发送消息\r\n    postMessageFun() {\r\n      const data = {\r\n        addFenceType: this.addFenceType,\r\n        circlePath: this.circlePath,\r\n        polygonPath: this.polygonPath\r\n      }\r\n      console.log('发送消息', data)\r\n      this.$emit('postMessage', data)\r\n    },\r\n    // 重置绘制的圆数据\r\n    resetCircleData() {\r\n      this.circlePath.center.lng = undefined\r\n      this.circlePath.center.lat = undefined\r\n      this.circlePath.radius = undefined\r\n      this.circlePath.area = undefined\r\n      this.circlePath.label = undefined\r\n    },\r\n    // 重置绘制的多边形数据\r\n    resetPolygonData() {\r\n      this.polygonPath.path = []\r\n      this.polygonPath.center.lng = undefined\r\n      this.polygonPath.center.lat = undefined\r\n      this.polygonPath.area = undefined\r\n      this.polygonPath.label = undefined\r\n    },\r\n\r\n    // 计算圆形面积\r\n    calcCircleAreaSize(radius) {\r\n      const radiusVal = convertNumber(radius)\r\n      if (radiusVal > 0) {\r\n        return Math.ceil(Math.PI * radiusVal * radiusVal)\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n\r\n    // 计算多边形面颊\r\n    calcPolygonAreaSize() {\r\n      const newPolygon = this.polygonPath.path.map((ele) => {\r\n        return [ele.lng, ele.lat]\r\n      })\r\n      const calcArr = [...newPolygon, newPolygon[0]]\r\n      var polygon = turf.polygon([calcArr])\r\n      var area = turf.area(polygon)\r\n      var center = turf.centerOfMass(polygon)\r\n      const location = center.geometry.coordinates\r\n      if (location && location.length === 2) {\r\n        const [lng, lat] = location\r\n        this.polygonPath.center.lng = lng\r\n        this.polygonPath.center.lat = lat\r\n        const newPoint = new this.BMap.Point(lng, lat)\r\n        this.getAddressInfoByLocation(newPoint, 'polygon')\r\n      }\r\n      this.polygonPath.area = Math.ceil(area / 1000)\r\n    },\r\n    // 移动或缩放时\r\n    syncCenterAndZoom(e) {\r\n      console.log('移动或缩放时', e)\r\n      //   const Zoom = e.target.getZoom()\r\n      if (e.target && e.target.re) {\r\n        this.currentCenter.lng = e.target.re.lng\r\n        this.currentCenter.lat = e.target.re.lat\r\n      }\r\n    },\r\n\r\n    // 添加围栏类型\r\n    addFenceTypeFun(fenceType) {\r\n      console.log('添加围栏类型', fenceType)\r\n      this.addFenceType = fenceType\r\n    },\r\n\r\n    // 添加围栏类型\r\n    addFenceTypeChange(ele) {\r\n      console.log('添加围栏类型12', ele)\r\n      const val = ele.target.value\r\n      this.addFenceType = val\r\n      setTimeout(() => {\r\n        this.resetPolygonData()\r\n        this.resetCircleData()\r\n        this.postMessageFun()\r\n      })\r\n    },\r\n    // 更新圆形覆盖物\r\n    updateCirclePath: debounce(function (e) {\r\n      console.log('更新圆形覆盖物', e)\r\n      const centerLocation = e.target.getCenter()\r\n      const raduis = e.target.getRadius()\r\n      console.log('centerLocation123123', centerLocation)\r\n      this.circlePath.center.lng = centerLocation.lng\r\n      this.circlePath.center.lat = centerLocation.lat\r\n      const raduisVal = Math.ceil(raduis)\r\n      this.circlePath.radius = raduisVal\r\n      this.circlePath.area = this.calcCircleAreaSize(raduisVal)\r\n      this.postMessageFun()\r\n    }, 150),\r\n    // 更新矩形覆盖物的路径\r\n    updatePolygonPath(e) {\r\n      console.log('更新矩形覆盖物的路径', e)\r\n      this.polygonPath.path = e.target.getPath()\r\n      this.calcPolygonAreaSize()\r\n      this.postMessageFun()\r\n    },\r\n    // 拖拽圆形marker\r\n    dragMarkerCircleEnd: debounce(function (ele) {\r\n      console.log('拖拽marker', ele)\r\n      this.circlePath.center.lng = ele.point.lng\r\n      this.circlePath.center.lat = ele.point.lat\r\n      this.getAddressInfoByLocation(ele.point, 'circle')\r\n    }, 100),\r\n    // 拖拽多边形marker\r\n    dragMarkerPolygonEnd: debounce(function (ele) {\r\n      console.log('拖拽marker', ele)\r\n      this.polygonPath.center.lng = ele.point.lng\r\n      this.polygonPath.center.lat = ele.point.lat\r\n      this.getAddressInfoByLocation(ele.point, 'polygon')\r\n    }, 100),\r\n    // 根据经纬度获取地址信息\r\n    getAddressInfoByLocation(point, type) {\r\n      const that = this\r\n      // 创建地址解析器实例\r\n      const myGeo = new that.BMap.Geocoder()\r\n      myGeo.getLocation(point, (res) => {\r\n        console.log('reererre', res)\r\n        const address = res.address\r\n        if (type === 'circle') {\r\n          that.circlePath.label = address\r\n        } else {\r\n          that.polygonPath.label = address\r\n        }\r\n        this.postMessageFun()\r\n      })\r\n    },\r\n    // 搜索完成方法\r\n    searchcompleteFun(ele) {\r\n      console.log('搜索完成方法', ele)\r\n    },\r\n    // 更改参数\r\n    changeFenceParams(data) {\r\n      console.log('更改参数', data)\r\n      const { addFenceType, circlePath, polygonPath } = data\r\n      this.addFenceType = addFenceType\r\n      if (addFenceType === 'circle') {\r\n        const { label, radius, center } = circlePath\r\n        this.circlePath.radius = radius\r\n        this.circlePath.label = label\r\n        if (center && center.lat && center.lng) {\r\n          const { lng, lat } = center\r\n          this.circlePath.center.lng = lng\r\n          this.circlePath.center.lat = lat\r\n          const circleAreaSize = this.calcCircleAreaSize(radius)\r\n          this.circlePath.area = circleAreaSize\r\n          setTimeout(() => {\r\n            this.map.centerAndZoom(new this.BMap.Point(lng, lat), 13)\r\n          }, 300)\r\n        }\r\n      } else if (addFenceType === 'polygon') {\r\n        const { path, center, label } = polygonPath\r\n        if (Array.isArray(path) && path.length) {\r\n          this.polygonPath.path = path\r\n        }\r\n        if (center && center.lat && center.lng) {\r\n          const { lng, lat } = center\r\n          this.polygonPath.center.lng = lng\r\n          this.polygonPath.center.lat = lat\r\n          setTimeout(() => {\r\n            this.map.centerAndZoom(new this.BMap.Point(lng, lat), 13)\r\n          }, 300)\r\n        }\r\n        this.polygonPath.label = label\r\n      } else {\r\n        this.addFenceType = ''\r\n        this.resetPolygonData()\r\n        this.resetCircleData()\r\n      }\r\n    },\r\n\r\n    // 通过关键词获取搜素下拉列表\r\n    getAddressListByKeyword(keyword) {\r\n      return new Promise((resolve) => {\r\n        console.log('通过关键词获取搜素下拉列表', keyword)\r\n        if (keyword) {\r\n          const that = this\r\n          console.log('keyword123123123', keyword)\r\n          console.log('keyword123123123', this.BMap)\r\n          const local = new that.BMap.LocalSearch(that.map, {\r\n            // 渲染在此地图上，当前条件不需要渲染并标注点\r\n            // renderOptions: { map: that.map }\r\n            autoViewport: true\r\n          })\r\n          local.search(keyword)\r\n          local.setSearchCompleteCallback(function (ele) {\r\n            console.log('setSearchCompleteCallback', ele)\r\n            resolve(ele.as || [])\r\n          })\r\n        } else {\r\n          resolve([])\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.BMapFence{\r\n  width: 100%;\r\n\r\n}\r\n.control {\r\n  margin: 10px;\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/.pnpm/thread-loader@3.0.4_webpack@5.91.0/node_modules/thread-loader/dist/cjs.js!../../../node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.12.16_webpack@5.91.0/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/.pnpm/vue-loader@15.11.1_@vue+compiler-sfc@3.4.31_css-loader@6.11.0_webpack@5.91.0__lodash@4.17.21__ppwlbeml3t3pbtwqrqs37ltiwu/node_modules/vue-loader/lib/index.js??vue-loader-options!../../../node_modules/.pnpm/source-map-loader@5.0.0_webpack@5.91.0/node_modules/source-map-loader/dist/cjs.js!./BMapFence.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/.pnpm/thread-loader@3.0.4_webpack@5.91.0/node_modules/thread-loader/dist/cjs.js!../../../node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.12.16_webpack@5.91.0/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/.pnpm/vue-loader@15.11.1_@vue+compiler-sfc@3.4.31_css-loader@6.11.0_webpack@5.91.0__lodash@4.17.21__ppwlbeml3t3pbtwqrqs37ltiwu/node_modules/vue-loader/lib/index.js??vue-loader-options!../../../node_modules/.pnpm/source-map-loader@5.0.0_webpack@5.91.0/node_modules/source-map-loader/dist/cjs.js!./BMapFence.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./BMapFence.vue?vue&type=template&id=1fffccfe\"\nimport script from \"./BMapFence.vue?vue&type=script&lang=js\"\nexport * from \"./BMapFence.vue?vue&type=script&lang=js\"\nimport style0 from \"./BMapFence.vue?vue&type=style&index=0&id=1fffccfe&prod&lang=less\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/.pnpm/vue-loader@15.11.1_@vue+compiler-sfc@3.4.31_css-loader@6.11.0_webpack@5.91.0__lodash@4.17.21__ppwlbeml3t3pbtwqrqs37ltiwu/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n  <BLModal\r\n    :title=\"`${editId ? '编辑' : '新增'}电子围栏`\"\r\n    :dialogStyle=\"{\r\n      top: '50px',\r\n      paddingBottom: '0px',\r\n    }\"\r\n    :bodyStyle=\"{\r\n      padding: '10px 16px',\r\n      maxHeight: 'calc(100vh - 180px)',\r\n      overflowY: 'scroll',\r\n    }\"\r\n    :visible=\"visible\"\r\n    @cancel=\"handleCancel\"\r\n  >\r\n    <div class=\"AddFenceDialog-content\">\r\n      <BMapFence ref=\"BMapFenceRef\" @postMessage=\"postMessage\"></BMapFence>\r\n\r\n      <a-card\r\n        class=\"AddFenceDialog-content-form\"\r\n        v-if=\"addFenceType\"\r\n        :bodyStyle=\"{ padding: '6px 16px' }\"\r\n      >\r\n        <h3>新增围栏：{{ addFenceType === \"circle\" ? \"圆\" : \"多边形\" }}</h3>\r\n        <a-form :form=\"form\" name=\"AddFenceForm\" layout=\"vertical\">\r\n          <a-form-item label=\"围栏名称\">\r\n            <a-input\r\n              v-decorator.trim=\"[\r\n                'name',\r\n                {\r\n                  rules: [\r\n                    {\r\n                      required: true,\r\n                      message: '请输入围栏名称',\r\n                    },\r\n                  ],\r\n                },\r\n              ]\"\r\n              placeholder=\"请输入围栏名称\"\r\n            />\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"类别\">\r\n            <a-select\r\n              placeholder=\"请选择类别\"\r\n              allowClear\r\n              v-decorator.trim=\"[\r\n                'category',\r\n                {\r\n                  rules: [\r\n                    {\r\n                      required: true,\r\n                      message: '请选择类别!',\r\n                    },\r\n                  ],\r\n                },\r\n              ]\"\r\n            >\r\n              <a-select-option\r\n                v-for=\"(item, index) in dicItems.fence_category\"\r\n                :value=\"item.dicValue\"\r\n                :key=\"index\"\r\n              >\r\n                {{ item.dicLabel }}\r\n              </a-select-option>\r\n            </a-select>\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"半径\" v-if=\"addFenceType === 'circle'\">\r\n            <div class=\"flex-censta\">\r\n              <a-input-number\r\n                :min=\"0\"\r\n                style=\"width: calc(100% - 30px)\"\r\n                placeholder=\"请输入\"\r\n                v-decorator.trim=\"[\r\n                  'radius',\r\n                  {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: '请输入半径',\r\n                      },\r\n                    ],\r\n                  },\r\n                ]\"\r\n                @change=\"radiusChange\"\r\n              />\r\n              <div style=\"margin-left: 6px; width: 30px\">m</div>\r\n            </div>\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"面积\">\r\n            <div class=\"flex-censta\">\r\n              <a-input-number\r\n                :min=\"0\"\r\n                style=\"width: calc(100% - 30px)\"\r\n                placeholder=\"请输入\"\r\n                disabled\r\n                v-decorator.trim=\"[\r\n                  'size',\r\n                  {\r\n                    rules: [\r\n                      {\r\n                        required: false,\r\n                        message: '请输入面积',\r\n                      },\r\n                    ],\r\n                  },\r\n                ]\"\r\n              />\r\n              <div style=\"margin-left: 6px; width: 30px\">km²</div>\r\n            </div>\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"经度\">\r\n            <a-input-number\r\n              :min=\"0\"\r\n              disabled\r\n              placeholder=\"请输入经度\"\r\n              style=\"width: 100%\"\r\n              v-decorator.trim=\"[\r\n                'longitude',\r\n                {\r\n                  rules: [\r\n                    {\r\n                      required: true,\r\n                      message: '请输入经度',\r\n                    },\r\n                  ],\r\n                },\r\n              ]\"\r\n            />\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"纬度\">\r\n            <a-input-number\r\n              :min=\"0\"\r\n              disabled\r\n              style=\"width: 100%\"\r\n              placeholder=\"请输入纬度\"\r\n              v-decorator.trim=\"[\r\n                'latitude',\r\n                {\r\n                  rules: [\r\n                    {\r\n                      required: true,\r\n                      message: '请输入纬度',\r\n                    },\r\n                  ],\r\n                },\r\n              ]\"\r\n            />\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"详细地址\">\r\n            <a-auto-complete\r\n              v-decorator.trim=\"[\r\n                'address',\r\n                {\r\n                  rules: [\r\n                    {\r\n                      required: true,\r\n                      message: '请输入详细地址',\r\n                    },\r\n                  ],\r\n                },\r\n              ]\"\r\n              :data-source=\"addressList\"\r\n              placeholder=\"请输入详细地址\"\r\n              @change=\"changeAddress\"\r\n              @select=\"selectAddress\"\r\n            >\r\n              <template slot=\"dataSource\">\r\n                <a-select-option\r\n                  v-for=\"addressItem in addressList\"\r\n                  :key=\"addressItem.addressStr\"\r\n                  >{{ addressItem.addressStr }}</a-select-option\r\n                >\r\n              </template>\r\n            </a-auto-complete>\r\n          </a-form-item>\r\n\r\n          <a-form-item label=\"备注\">\r\n            <a-textarea\r\n              placeholder=\"请输入备注\"\r\n              allowClear\r\n              :maxLength=\"200\"\r\n              :auto-size=\"{ minRows: 3, maxRows: 5 }\"\r\n              v-decorator.trim=\"[\r\n                'remark',\r\n                {\r\n                  rules: [\r\n                    {\r\n                      required: false,\r\n                      message: '请输入备注',\r\n                    },\r\n                  ],\r\n                },\r\n              ]\"\r\n            />\r\n          </a-form-item>\r\n\r\n          <a-form-item>\r\n            <div class=\"flex-cenend formBtn\">\r\n              <BLButton @click=\"resetForm()\">重置</BLButton>\r\n              <BLButton\r\n                type=\"primary\"\r\n                :loading=\"submitLoading\"\r\n                @click=\"handleSubmit()\"\r\n                >保存</BLButton\r\n              >\r\n            </div>\r\n          </a-form-item>\r\n        </a-form>\r\n      </a-card>\r\n    </div>\r\n\r\n    <div slot=\"footer\">\r\n      <BLButton @click=\"handleCancel\">取消</BLButton>\r\n    </div>\r\n  </BLModal>\r\n</template>\r\n\r\n<script>\r\nimport BMapFence from \"@/components/BLMap/BMapFence.vue\";\r\nimport {\r\n  getMultiDictItems,\r\n  addElectronicFence,\r\n  editElectronicFence,\r\n} from \"@/api/index.js\";\r\nimport { debounce } from \"lodash\";\r\n\r\nexport default {\r\n  name: \"AddFenceDialog\",\r\n  components: {\r\n    BMapFence,\r\n  },\r\n  props: {\r\n    // 弹窗显示隐藏\r\n    visible: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    rowInfo: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      },\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      addFenceType: \"\",\r\n\r\n      polygonPath: [],\r\n\r\n      submitLoading: false,\r\n      isLoadDicItems: false,\r\n      addAddressOptions: [],\r\n\r\n      // 字典数据\r\n      dicItems: {\r\n        fence_category: [],\r\n      },\r\n      // 编辑id\r\n      editId: \"\",\r\n\r\n      // 1 点， 2 区域\r\n      type: 1,\r\n      iframeKey: null,\r\n      iframeSrc: \"http://tms-uat.dekuncn.com:5013/#/dkwlMap\",\r\n\r\n      addressList: [],\r\n    };\r\n  },\r\n  watch: {\r\n    visible(newVal) {\r\n      if (newVal) {\r\n        this.initModal();\r\n      } else {\r\n        this.addFenceType = \"\";\r\n        this.$refs.BMapFenceRef.changeFenceParams({\r\n          addFenceType: undefined,\r\n          circlePath: {\r\n            center: {\r\n              lng: undefined,\r\n              lat: undefined,\r\n            },\r\n            radius: undefined,\r\n            label: undefined,\r\n          },\r\n          polygonPath: {\r\n            path: [],\r\n            center: {\r\n              lng: undefined,\r\n              lat: undefined,\r\n            },\r\n            label: undefined,\r\n          },\r\n        });\r\n        this.editId = \"\";\r\n        this.form.resetFields();\r\n      }\r\n    },\r\n  },\r\n  beforeCreate() {\r\n    this.form = this.$form.createForm(this, { name: \"AddFenceDialog\" });\r\n  },\r\n  methods: {\r\n    // 初始化modal\r\n    initModal() {\r\n      console.log(\"初始化modal\");\r\n      this.getDicItems();\r\n      if (this.rowInfo && this.rowInfo.id) {\r\n        this.echoForm();\r\n      }\r\n    },\r\n    // 发送消息\r\n    postMessage(data) {\r\n      console.log(\"发送消息123\", data);\r\n      const { addFenceType, circlePath, polygonPath } = data;\r\n      this.addFenceType = addFenceType;\r\n      if (addFenceType === \"circle\") {\r\n        this.form.setFieldsValue({\r\n          longitude: circlePath.center.lng,\r\n          latitude: circlePath.center.lat,\r\n          radius: circlePath.radius,\r\n          size: circlePath.area,\r\n          address: circlePath.label,\r\n        });\r\n      } else if (addFenceType === \"polygon\") {\r\n        const newPolygonPath = polygonPath.path.map((ele) => {\r\n          return {\r\n            lon: ele.lng,\r\n            lat: ele.lat,\r\n          };\r\n        });\r\n        this.form.setFieldsValue({\r\n          longitude: polygonPath.center.lng,\r\n          latitude: polygonPath.center.lat,\r\n          size: polygonPath.area,\r\n          address: polygonPath.label,\r\n        });\r\n        this.polygonPath = newPolygonPath;\r\n      }\r\n    },\r\n    // 获取字段数据\r\n    async getDicItems() {\r\n      const dictObj = {\r\n        1: [],\r\n      };\r\n      const ids = Object.keys(dictObj).join(\",\");\r\n      const res = await getMultiDictItems(ids);\r\n      const resData = res?.data || [];\r\n      console.log(\"resData1231231\", resData);\r\n      resData.forEach((ele) => {\r\n        if (ele.dicBindId) {\r\n          dictObj[ele.dicBindId].push(ele);\r\n        }\r\n      });\r\n      this.dicItems.fence_category = dictObj[\"1\"];\r\n    },\r\n\r\n    // 回显表单\r\n    echoForm() {\r\n      console.log(\"回显表单\", this.rowInfo);\r\n      this.$nextTick(() => {\r\n        const rowInfo = this.rowInfo;\r\n        this.editId = rowInfo.id;\r\n        this.type = rowInfo.type;\r\n        this.addFenceType = rowInfo.type == 1 ? \"circle\" : \"polygon\";\r\n\r\n        const { longitude, latitude } = rowInfo;\r\n        const lng = Number(longitude);\r\n        const lat = Number(latitude);\r\n\r\n        this.$nextTick(() => {\r\n          this.form.setFieldsValue({\r\n            name: rowInfo.name,\r\n            category: String(rowInfo.category),\r\n            radius: rowInfo.radius,\r\n            size: rowInfo.size,\r\n            longitude: lng,\r\n            latitude: lat,\r\n            address: rowInfo.address,\r\n            remark: rowInfo.remark,\r\n            type: rowInfo.type,\r\n          });\r\n\r\n          this.$nextTick(() => {\r\n            let nPath = [];\r\n            if (rowInfo.dispatchAreaCoordinates) {\r\n              const cPath = JSON.parse(rowInfo.dispatchAreaCoordinates);\r\n              if (Array.isArray(cPath) && cPath.length) {\r\n                nPath = cPath.map((ele) => {\r\n                  return {\r\n                    lng: ele.lon,\r\n                    ...ele,\r\n                  };\r\n                });\r\n              }\r\n            }\r\n\r\n            this.$refs.BMapFenceRef.changeFenceParams({\r\n              addFenceType: this.addFenceType,\r\n              circlePath: {\r\n                center: {\r\n                  lng,\r\n                  lat,\r\n                },\r\n                radius: rowInfo.radius,\r\n                label: rowInfo.address,\r\n              },\r\n              polygonPath: {\r\n                path: nPath,\r\n                center: {\r\n                  lng,\r\n                  lat,\r\n                },\r\n                label: rowInfo.address,\r\n              },\r\n            });\r\n          });\r\n        });\r\n      });\r\n    },\r\n\r\n    // 取消\r\n    handleCancel() {\r\n      this.$emit(\"update:visible\", false);\r\n    },\r\n\r\n    // 半径\r\n    radiusChange(ele) {\r\n      console.log(\"半径=====》\", ele);\r\n      this.$nextTick(() => {\r\n        this.postMessageToParent();\r\n      });\r\n    },\r\n\r\n    // 更改详细地址\r\n    changeAddress: debounce(async function (val) {\r\n      console.log(\"更改详细地址\", val);\r\n      const addressList = await this.$refs.BMapFenceRef.getAddressListByKeyword(\r\n        val\r\n      );\r\n      console.log(\"addressList123123123123\", addressList);\r\n\r\n      const cAddressList = [];\r\n      const uniqueAddressList = [];\r\n      addressList.forEach((ele) => {\r\n        const addressStr = ele.address + ele.title;\r\n        if (!cAddressList.includes(addressStr)) {\r\n          cAddressList.push(addressStr);\r\n          ele.addressStr = addressStr;\r\n          uniqueAddressList.push(ele);\r\n        }\r\n      });\r\n\r\n      this.addressList = uniqueAddressList;\r\n      setTimeout(() => {\r\n        this.postMessageToParent();\r\n      }, 500);\r\n    }, 350),\r\n    // 选中\r\n    selectAddress(ele) {\r\n      console.log(\"选中=====>\", ele);\r\n      this.form.setFieldsValue({\r\n        address: ele,\r\n      });\r\n    },\r\n\r\n    // 给地图组件传递消息\r\n    postMessageToParent() {\r\n      if (this.addFenceType) {\r\n        const { radius, address, lon, lat } = this.form.getFieldsValue([\r\n          \"radius\",\r\n          \"address\",\r\n        ]);\r\n        const submitData = {\r\n          addFenceType: this.addFenceType,\r\n          circlePath: {\r\n            center: {\r\n              lng: lon,\r\n              lat: lat,\r\n            },\r\n            radius: undefined,\r\n            label: address,\r\n          },\r\n          polygonPath: {\r\n            path: [],\r\n            center: {\r\n              lng: lon,\r\n              lat: lat,\r\n            },\r\n            label: address,\r\n          },\r\n        };\r\n        let findAddressitem = null;\r\n        if (this.addressList && this.addressList.length) {\r\n          findAddressitem = this.addressList.find(\r\n            (ele) => ele.addressStr === address\r\n          );\r\n        }\r\n        console.log(\"findAddressitem123123123\", findAddressitem);\r\n\r\n        // 如果是圆形\r\n        if (this.addFenceType === \"circle\") {\r\n          if (findAddressitem && findAddressitem.point) {\r\n            submitData.circlePath.center.lng = findAddressitem.point.lng;\r\n            submitData.circlePath.center.lat = findAddressitem.point.lat;\r\n          }\r\n          submitData.circlePath.radius = radius;\r\n          submitData.circlePath.label = address;\r\n        } else if (this.addFenceType === \"polygon\") {\r\n          submitData.polygonPath.label = address;\r\n        }\r\n        this.$refs.BMapFenceRef.changeFenceParams(submitData);\r\n      }\r\n    },\r\n\r\n    // 提交\r\n    handleSubmit() {\r\n      console.log(\"表单提交\");\r\n      this.form.validateFields((err, values) => {\r\n        if (!err) {\r\n          console.log(\"表单提交数据\", values);\r\n          const submitData = {\r\n            type: this.addFenceType === \"polygon\" ? 2 : 1,\r\n            ...values,\r\n          };\r\n\r\n          if (this.addFenceType === \"polygon\") {\r\n            submitData.dispatchAreaCoordinates = JSON.stringify(\r\n              this.polygonPath\r\n            );\r\n          }\r\n\r\n          if (this.editId) {\r\n            submitData.id = this.editId;\r\n            this.editFenceFun(submitData);\r\n          } else {\r\n            this.addFenceFun(submitData);\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    // 重置表单\r\n    resetForm() {\r\n      this.form.resetFields();\r\n    },\r\n\r\n    // 新增电子围栏\r\n    addFenceFun(submitData) {\r\n      this.submitLoading = true;\r\n      addElectronicFence(submitData)\r\n        .then((res) => {\r\n          if (res.code === 200) {\r\n            this.$message.success(\"新增电子围栏成功\");\r\n            this.handleCancel();\r\n            this.$emit(\"success\");\r\n          } else {\r\n            this.$message.error(res.message || \"请求错误\");\r\n          }\r\n        })\r\n        .finally(() => {\r\n          this.submitLoading = false;\r\n        });\r\n    },\r\n\r\n    // 新增电子围栏\r\n    editFenceFun(submitData) {\r\n      this.submitLoading = true;\r\n      editElectronicFence(submitData)\r\n        .then((res) => {\r\n          if (res.code === 200) {\r\n            this.$message.success(\"编辑电子围栏成功\");\r\n            this.handleCancel();\r\n            this.$emit(\"success\");\r\n          } else {\r\n            this.$message.error(res.message || \"请求错误\");\r\n          }\r\n        })\r\n        .finally(() => {\r\n          this.submitLoading = false;\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.AddFenceDialog-content {\r\n  position: relative;\r\n\r\n  &-form {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 20px;\r\n    transform: translateY(-50%);\r\n    z-index: 100;\r\n    width: 300px;\r\n    height: 500px;\r\n    overflow-y: scroll;\r\n  }\r\n}\r\n\r\n.formBtn {\r\n  gap: 10px;\r\n}\r\n</style>\r\n","import mod from \"-!../../../../../../../../node_modules/.pnpm/thread-loader@3.0.4_webpack@5.91.0/node_modules/thread-loader/dist/cjs.js!../../../../../../../../node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.12.16_webpack@5.91.0/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../../../../../node_modules/.pnpm/vue-loader@15.11.1_@vue+compiler-sfc@3.4.31_css-loader@6.11.0_webpack@5.91.0__lodash@4.17.21__ppwlbeml3t3pbtwqrqs37ltiwu/node_modules/vue-loader/lib/index.js??vue-loader-options!../../../../../../../../node_modules/.pnpm/source-map-loader@5.0.0_webpack@5.91.0/node_modules/source-map-loader/dist/cjs.js!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../../../../../node_modules/.pnpm/thread-loader@3.0.4_webpack@5.91.0/node_modules/thread-loader/dist/cjs.js!../../../../../../../../node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.12.16_webpack@5.91.0/node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../../../../../node_modules/.pnpm/vue-loader@15.11.1_@vue+compiler-sfc@3.4.31_css-loader@6.11.0_webpack@5.91.0__lodash@4.17.21__ppwlbeml3t3pbtwqrqs37ltiwu/node_modules/vue-loader/lib/index.js??vue-loader-options!../../../../../../../../node_modules/.pnpm/source-map-loader@5.0.0_webpack@5.91.0/node_modules/source-map-loader/dist/cjs.js!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=3085e7db&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=3085e7db&prod&lang=less&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../node_modules/.pnpm/vue-loader@15.11.1_@vue+compiler-sfc@3.4.31_css-loader@6.11.0_webpack@5.91.0__lodash@4.17.21__ppwlbeml3t3pbtwqrqs37ltiwu/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3085e7db\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","editId","top","paddingBottom","padding","maxHeight","overflowY","visible","on","handleCancel","staticClass","ref","postMessage","_v","_s","addFenceType","form","directives","name","rawName","value","rules","required","message","expression","modifiers","_l","dicItems","item","index","key","dicValue","dicLabel","staticStyle","radiusChange","_e","addressList","changeAddress","selectAddress","slot","addressItem","addressStr","minRows","maxRows","$event","resetForm","submitLoading","handleSubmit","staticRenderFns","center","zoom","bMapReady","clickBMap","syncCenterAndZoom","addFenceTypeChange","circlePath","dragMarkerCircleEnd","label","color","fontSize","width","height","polygonPath","dragMarkerPolygonEnd","radius","updateCirclePath","path","updatePolygonPath","convertNumber","str","val","Number","isNaN","component"],"sourceRoot":""}