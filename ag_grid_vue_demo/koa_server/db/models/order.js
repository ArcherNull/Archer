'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class order extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
    }
  }
  order.init({
    searchValue: DataTypes.STRING,
    params: DataTypes.STRING,
    pageSize: DataTypes.STRING,
    pageNum: DataTypes.STRING,
    orderByColumn: DataTypes.STRING,
    isAsc: DataTypes.STRING,
    fieldSort: DataTypes.STRING,
    likeField: DataTypes.STRING,
    prodivisionIds: DataTypes.STRING,
    startTime: DataTypes.DATE,
    endTime: DataTypes.DATE,
    objectIdList: DataTypes.STRING,
    commonTime: DataTypes.DATE,
    objectStrList: DataTypes.STRING,
    yesOrNoField: DataTypes.STRING,
    inField: DataTypes.STRING,
    gtField: DataTypes.STRING,
    ltField: DataTypes.STRING,
    commStrValue: DataTypes.STRING,
    orderBy: DataTypes.STRING,
    isTrue: DataTypes.STRING,
    companyIds: DataTypes.STRING,
    notNeedLimit: DataTypes.STRING,
    orderId: DataTypes.INTEGER,
    revision: DataTypes.STRING,
    createdById: DataTypes.INTEGER,
    createdBy: DataTypes.STRING,
    createdTime: DataTypes.DATE,
    updatedById: DataTypes.INTEGER,
    updatedBy: DataTypes.STRING,
    updatedTime: DataTypes.DATE,
    orderNo: DataTypes.STRING,
    customerNo: DataTypes.STRING,
    sourceNo: DataTypes.STRING,
    orderDate: DataTypes.DATE,
    orderState: DataTypes.STRING,
    orderStates: DataTypes.STRING,
    calculationFormula: DataTypes.STRING,
    serviceFormula: DataTypes.STRING,
    carType: DataTypes.STRING,
    carLength: DataTypes.DECIMAL,
    handoverMode: DataTypes.STRING,
    nowPay: DataTypes.DECIMAL,
    fetchPay: DataTypes.DECIMAL,
    monthPay: DataTypes.DECIMAL,
    paymentMode: DataTypes.STRING,
    customerId: DataTypes.INTEGER,
    customerName: DataTypes.STRING,
    customerCompany: DataTypes.STRING,
    beginCompany: DataTypes.STRING,
    beginMan: DataTypes.STRING,
    beginPhone: DataTypes.STRING,
    beginAddress: DataTypes.STRING,
    beginProvince: DataTypes.STRING,
    beginProvinceid: DataTypes.STRING,
    beginCity: DataTypes.STRING,
    beginCityid: DataTypes.STRING,
    beginArea: DataTypes.STRING,
    beginAreaid: DataTypes.STRING,
    beginStreet: DataTypes.STRING,
    beginStreetid: DataTypes.STRING,
    endCompany: DataTypes.STRING,
    endMan: DataTypes.STRING,
    endPhone: DataTypes.STRING,
    endAddress: DataTypes.STRING,
    endProvince: DataTypes.STRING,
    endProvinceid: DataTypes.STRING,
    endCity: DataTypes.STRING,
    endCityid: DataTypes.STRING,
    endArea: DataTypes.STRING,
    endAreaid: DataTypes.STRING,
    endStreet: DataTypes.STRING,
    endStreetid: DataTypes.STRING,
    salesMan: DataTypes.STRING,
    salesManPhone: DataTypes.STRING,
    deliveryDate: DataTypes.DATE,
    arriveDate: DataTypes.DATE,
    isReceipt: DataTypes.STRING,
    receiptNum: DataTypes.DECIMAL,
    receiptRequirement: DataTypes.STRING,
    taxRate: DataTypes.STRING,
    cancelMan: DataTypes.STRING,
    cancelDate: DataTypes.DATE,
    orderRemark: DataTypes.STRING,
    deliveryFee: DataTypes.DECIMAL,
    trunklineFee: DataTypes.DECIMAL,
    terminalFee: DataTypes.DECIMAL,
    basicFee: DataTypes.DECIMAL,
    totalFee: DataTypes.DECIMAL,
    surplusTotalFee: DataTypes.DECIMAL,
    otherFee: DataTypes.DECIMAL,
    otherFeeRemark: DataTypes.STRING,
    planCostFee: DataTypes.DECIMAL,
    planProfitFee: DataTypes.DECIMAL,
    addCutFee: DataTypes.DECIMAL,
    operationType: DataTypes.STRING,
    billState: DataTypes.STRING,
    surplusNowPay: DataTypes.DECIMAL,
    surplusFetchPay: DataTypes.DECIMAL,
    surplusMonthPay: DataTypes.DECIMAL,
    prodivisionName: DataTypes.STRING,
    prodivisionId: DataTypes.INTEGER,
    financialId: DataTypes.INTEGER,
    companyId: DataTypes.INTEGER,
    orderStateList: DataTypes.STRING,
    augmentIds: DataTypes.STRING,
    augmentNos: DataTypes.STRING,
    augmentFee: DataTypes.STRING,
    busOrderCustomerVoList: DataTypes.STRING,
    busOrderDetailVoList: DataTypes.STRING,
    busOrderOtherfeeVoList: DataTypes.STRING,
    confirm: DataTypes.STRING,
    orderAuditMan: DataTypes.STRING,
    orderAuditDate: DataTypes.DATE,
    orderNum: DataTypes.DECIMAL,
    orderWeight: DataTypes.DECIMAL,
    orderVolume: DataTypes.DECIMAL,
    calculationWeight: DataTypes.DECIMAL,
    calculationVolume: DataTypes.DECIMAL,
    orderIds: DataTypes.STRING,
    receiptPay: DataTypes.DECIMAL,
    receiptState: DataTypes.STRING,
    transitType: DataTypes.STRING,
    noteNo: DataTypes.STRING,
    beginSite: DataTypes.STRING,
    endSite: DataTypes.STRING,
    declaredValue: DataTypes.DECIMAL,
    payMan: DataTypes.STRING,
    productType: DataTypes.STRING,
    trackState: DataTypes.STRING,
    billingDepartment: DataTypes.STRING,
    costAndFreight: DataTypes.STRING,
    verifyoffMoney: DataTypes.DECIMAL,
    verifyoffState: DataTypes.STRING,
    salesDept: DataTypes.STRING,
    goodsNature: DataTypes.STRING,
    homeType: DataTypes.STRING,
    isAccountBill: DataTypes.STRING,
    mainId: DataTypes.INTEGER,
    invoiceMain: DataTypes.STRING,
    supplierId: DataTypes.INTEGER,
    supplierName: DataTypes.STRING,
    isMiddle: DataTypes.STRING,
    costShare: DataTypes.DECIMAL,
    costRate: DataTypes.DECIMAL,
    orderSplitCount: DataTypes.STRING,
    kilometers: DataTypes.STRING,
    financeAuditState: DataTypes.STRING,
    financeAuditUser: DataTypes.STRING,
    financeAuditUserId: DataTypes.INTEGER,
    financeAuditDate: DataTypes.DATE,
    auditStatus: DataTypes.STRING,
    deliveryCost: DataTypes.DECIMAL,
    trunklineCost: DataTypes.DECIMAL,
    vehicleCost: DataTypes.DECIMAL,
    terminalCost: DataTypes.DECIMAL,
    isInsure: DataTypes.DECIMAL,
    insureCount: DataTypes.STRING,
    insureWaybill: DataTypes.STRING,
    distance: DataTypes.DECIMAL,
    aging: DataTypes.DECIMAL,
    calculationPrice1: DataTypes.DECIMAL,
    calculationPrice2: DataTypes.DECIMAL,
    deliveryPrice1: DataTypes.DECIMAL,
    deliveryPrice2: DataTypes.DECIMAL,
    sendPrice1: DataTypes.DECIMAL,
    sendPrice2: DataTypes.DECIMAL,
    calculateMode: DataTypes.STRING,
    calculateStandardId: DataTypes.INTEGER,
    calculateStandardName: DataTypes.STRING,
    ladderType: DataTypes.STRING,
    calculateJson: DataTypes.STRING,
    calculateResult: DataTypes.STRING,
    notTaxMoney: DataTypes.DECIMAL,
    isDelete: DataTypes.STRING,
    assignPerson: DataTypes.STRING,
    assignTime: DataTypes.DATE,
    acceptPerson: DataTypes.STRING,
    acceptTime: DataTypes.DATE,
    deliverType: DataTypes.STRING,
    supplierHierarchy: DataTypes.STRING,
    secondSupplierId: DataTypes.INTEGER,
    secondSupplierName: DataTypes.STRING,
    acceptState: DataTypes.STRING,
    joinCompanyId: DataTypes.INTEGER,
    joinCompanyName: DataTypes.STRING,
    joinProdivisionName: DataTypes.STRING,
    joinProdivisionId: DataTypes.INTEGER,
    isSystemInside: DataTypes.STRING,
    isJoin: DataTypes.STRING,
    isPushHgj: DataTypes.STRING,
    mhbDeviceNo: DataTypes.STRING,
    mhbDeviceState: DataTypes.STRING,
    taxType: DataTypes.STRING,
    trunkLineFeeNoTax: DataTypes.DECIMAL,
    assistFee: DataTypes.DECIMAL,
    assistFeeRate: DataTypes.STRING,
    assistFeeNoTax: DataTypes.DECIMAL,
    surplusAssistFee: DataTypes.DECIMAL,
    surplusAssistFeeMonth: DataTypes.DECIMAL,
    surplusAssistFeeFetch: DataTypes.DECIMAL,
    surplusAssistFeeNow: DataTypes.DECIMAL,
    agencyFee: DataTypes.DECIMAL,
    agencyFeeRate: DataTypes.STRING,
    agencyFeeNoTax: DataTypes.DECIMAL,
    surplusAgencyFee: DataTypes.DECIMAL,
    realTax: DataTypes.DECIMAL,
    serviceCost: DataTypes.DECIMAL,
    goodsNameOne: DataTypes.STRING,
    waybillNo: DataTypes.STRING,
    orderGrossProfit: DataTypes.STRING,
    totalIn: DataTypes.DECIMAL,
    blat: DataTypes.STRING,
    blon: DataTypes.STRING,
    elon: DataTypes.STRING,
    elat: DataTypes.STRING
  }, {
    sequelize,
    modelName: 'order',
  });
  return order;
};